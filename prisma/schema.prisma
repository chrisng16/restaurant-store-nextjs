generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  roles         Role[]    @default([USER])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([token, email])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([token, email])
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  desc        String
  category    Category @relation(fields: [catId], references: [id])
  catId       Int
  price       Int
  isAvailable Boolean  @default(true)
  menuNum     String   @unique
  optionList  Option[]
}

model Option {
  id         Int            @id @default(autoincrement())
  name       String
  isOptional Boolean
  options    OptionChoice[]
  Item       Item[]
}

model OptionChoice {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  unitPrice Int
  Option    Option[]
}

model Category {
  id       Int    @id @default(autoincrement())
  category String @unique
  Item     Item[]
}

model CartItem {
  id        String @id @default(cuid())
  itemId    Int
  optionIds Int[]
  count     Int
  Cart      Cart[]
}

model Cart {
  id           String     @id @default(cuid())
  cartItems    CartItem[]
  cartSubTotal Int
  Order        Order[]
}

model Order {
  id      String  @id @default(cuid())
  cart    Cart    @relation(fields: [cartId], references: [id])
  cartId  String
  isPayed Boolean @default(false)
}
